[gd_resource type="ShaderMaterial" load_steps=6 format=3 uid="uid://bwlcao0h3ox43"]

[ext_resource type="Texture2D" uid="uid://d2wmgrjq3ld5o" path="res://Textures/Glass/FrostedGlass/Glass_Frosted_001_basecolor.jpg" id="1_7mcqs"]
[ext_resource type="Texture2D" uid="uid://cqsu55eguvjug" path="res://Textures/Glass/FrostedGlass/Glass_Frosted_001_ambientOcclusion.jpg" id="2_u5vax"]
[ext_resource type="Texture2D" uid="uid://gm4fxne8tqpm" path="res://Textures/Glass/FrostedGlass/Glass_Frosted_001_height.png" id="3_i83fr"]
[ext_resource type="Texture2D" uid="uid://6kmuhiqoyna0" path="res://Textures/Glass/FrostedGlass/Glass_Frosted_001_roughness.jpg" id="4_jteyl"]

[sub_resource type="Shader" id="Shader_km7q2"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform float alpha : hint_range(0.0, 1.0, 0.1) = 0.5;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
uniform sampler2D texture_ambient_occlusion : hint_default_white, filter_linear_mipmap,repeat_enable;
uniform vec4 ao_texture_channel;
uniform float ao_light_affect;
uniform sampler2D texture_heightmap : hint_default_black,filter_linear_mipmap,repeat_enable;
uniform float heightmap_scale;
uniform int heightmap_min_layers;
uniform int heightmap_max_layers;
uniform vec2 heightmap_flip;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform float distortion_size = 0.4;

vec4 overlay(vec4 base, vec4 blend){
	vec4 limit = step(0.5, base);
	return mix(2.0 * base * blend, 1.0 - 2.0 * (1.0 - base) * (1.0 - blend), limit);
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}






void fragment() {
	vec2 base_uv = UV;
	{
		vec3 view_dir = normalize(normalize(-VERTEX + EYE_OFFSET) * mat3(TANGENT * heightmap_flip.x, -BINORMAL * heightmap_flip.y, NORMAL));
		float depth = 1.0 - texture(texture_heightmap, base_uv).r;
		vec2 ofs = base_uv - view_dir.xy * depth * heightmap_scale * 0.01;
		base_uv=ofs;
	}
	//vec4 albedo_tex = texture(texture_albedo,base_uv);
	//ALBEDO = albedo.rgb * albedo_tex.rgb;
	vec2 albedo_tex = texture(texture_normal, base_uv).xy - vec2(0.5);
	//ALBEDO = texture(SCREEN_TEXTURE, SCREEN_UV + albedo_tex * distortion_size).rgb;
	//ALBEDO = overlay(textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0), texture(texture_albedo, base_uv));
	vec3 albedo_sup_text = mix(texture(SCREEN_TEXTURE, SCREEN_UV + albedo_tex * distortion_size).rgb, texture(texture_albedo, SCREEN_UV + albedo_tex * distortion_size).rgb, 0.5);
	ALBEDO = albedo_sup_text;
	//ALBEDO = texture(overlay(textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0), textureLod(texture_albedo, SCREEN_UV, 0.0)), SCREEN_UV + albedo_tex * distortion_size).rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	ALPHA *= alpha;
	AO = dot(texture(texture_ambient_occlusion,base_uv),ao_texture_channel);
	AO_LIGHT_AFFECT = ao_light_affect;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_km7q2")
shader_parameter/alpha = 0.5
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/normal_scale = 1.0
shader_parameter/ao_texture_channel = null
shader_parameter/ao_light_affect = 0.0
shader_parameter/heightmap_scale = 5.0
shader_parameter/heightmap_min_layers = 8
shader_parameter/heightmap_max_layers = 32
shader_parameter/heightmap_flip = Vector2(1, 1)
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/distortion_size = 0.9
shader_parameter/texture_albedo = ExtResource("1_7mcqs")
shader_parameter/texture_roughness = ExtResource("4_jteyl")
shader_parameter/texture_normal = ExtResource("4_jteyl")
shader_parameter/texture_ambient_occlusion = ExtResource("2_u5vax")
shader_parameter/texture_heightmap = ExtResource("3_i83fr")
